// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: policy.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProbeService_GetProbeData_FullMethodName = "/policy.ProbeService/getProbeData"
)

// ProbeServiceClient is the client API for ProbeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProbeServiceClient interface {
	GetProbeData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProbeResponse, error)
}

type probeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeServiceClient(cc grpc.ClientConnInterface) ProbeServiceClient {
	return &probeServiceClient{cc}
}

func (c *probeServiceClient) GetProbeData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, ProbeService_GetProbeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeServiceServer is the server API for ProbeService service.
// All implementations should embed UnimplementedProbeServiceServer
// for forward compatibility
type ProbeServiceServer interface {
	GetProbeData(context.Context, *emptypb.Empty) (*ProbeResponse, error)
}

// UnimplementedProbeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProbeServiceServer struct {
}

func (UnimplementedProbeServiceServer) GetProbeData(context.Context, *emptypb.Empty) (*ProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProbeData not implemented")
}

// UnsafeProbeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeServiceServer will
// result in compilation errors.
type UnsafeProbeServiceServer interface {
	mustEmbedUnimplementedProbeServiceServer()
}

func RegisterProbeServiceServer(s grpc.ServiceRegistrar, srv ProbeServiceServer) {
	s.RegisterService(&ProbeService_ServiceDesc, srv)
}

func _ProbeService_GetProbeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServiceServer).GetProbeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProbeService_GetProbeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServiceServer).GetProbeData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProbeService_ServiceDesc is the grpc.ServiceDesc for ProbeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProbeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.ProbeService",
	HandlerType: (*ProbeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProbeData",
			Handler:    _ProbeService_GetProbeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}

const (
	PolicyService_ContainerPolicy_FullMethodName = "/policy.PolicyService/containerPolicy"
	PolicyService_HostPolicy_FullMethodName      = "/policy.PolicyService/hostPolicy"
)

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyServiceClient interface {
	ContainerPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Response, error)
	HostPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Response, error)
}

type policyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyServiceClient(cc grpc.ClientConnInterface) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) ContainerPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PolicyService_ContainerPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) HostPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PolicyService_HostPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
// All implementations should embed UnimplementedPolicyServiceServer
// for forward compatibility
type PolicyServiceServer interface {
	ContainerPolicy(context.Context, *Policy) (*Response, error)
	HostPolicy(context.Context, *Policy) (*Response, error)
}

// UnimplementedPolicyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (UnimplementedPolicyServiceServer) ContainerPolicy(context.Context, *Policy) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) HostPolicy(context.Context, *Policy) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostPolicy not implemented")
}

// UnsafePolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyServiceServer will
// result in compilation errors.
type UnsafePolicyServiceServer interface {
	mustEmbedUnimplementedPolicyServiceServer()
}

func RegisterPolicyServiceServer(s grpc.ServiceRegistrar, srv PolicyServiceServer) {
	s.RegisterService(&PolicyService_ServiceDesc, srv)
}

func _PolicyService_ContainerPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ContainerPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_ContainerPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ContainerPolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_HostPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).HostPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_HostPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).HostPolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyService_ServiceDesc is the grpc.ServiceDesc for PolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "containerPolicy",
			Handler:    _PolicyService_ContainerPolicy_Handler,
		},
		{
			MethodName: "hostPolicy",
			Handler:    _PolicyService_HostPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}

const (
	ReversePolicyService_ContainerPolicy_FullMethodName = "/policy.ReversePolicyService/containerPolicy"
	ReversePolicyService_HostPolicy_FullMethodName      = "/policy.ReversePolicyService/hostPolicy"
)

// ReversePolicyServiceClient is the client API for ReversePolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReversePolicyServiceClient interface {
	ContainerPolicy(ctx context.Context, opts ...grpc.CallOption) (ReversePolicyService_ContainerPolicyClient, error)
	HostPolicy(ctx context.Context, opts ...grpc.CallOption) (ReversePolicyService_HostPolicyClient, error)
}

type reversePolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReversePolicyServiceClient(cc grpc.ClientConnInterface) ReversePolicyServiceClient {
	return &reversePolicyServiceClient{cc}
}

func (c *reversePolicyServiceClient) ContainerPolicy(ctx context.Context, opts ...grpc.CallOption) (ReversePolicyService_ContainerPolicyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReversePolicyService_ServiceDesc.Streams[0], ReversePolicyService_ContainerPolicy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &reversePolicyServiceContainerPolicyClient{stream}
	return x, nil
}

type ReversePolicyService_ContainerPolicyClient interface {
	Send(*Response) error
	Recv() (*Policy, error)
	grpc.ClientStream
}

type reversePolicyServiceContainerPolicyClient struct {
	grpc.ClientStream
}

func (x *reversePolicyServiceContainerPolicyClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reversePolicyServiceContainerPolicyClient) Recv() (*Policy, error) {
	m := new(Policy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reversePolicyServiceClient) HostPolicy(ctx context.Context, opts ...grpc.CallOption) (ReversePolicyService_HostPolicyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReversePolicyService_ServiceDesc.Streams[1], ReversePolicyService_HostPolicy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &reversePolicyServiceHostPolicyClient{stream}
	return x, nil
}

type ReversePolicyService_HostPolicyClient interface {
	Send(*Response) error
	Recv() (*Policy, error)
	grpc.ClientStream
}

type reversePolicyServiceHostPolicyClient struct {
	grpc.ClientStream
}

func (x *reversePolicyServiceHostPolicyClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reversePolicyServiceHostPolicyClient) Recv() (*Policy, error) {
	m := new(Policy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReversePolicyServiceServer is the server API for ReversePolicyService service.
// All implementations should embed UnimplementedReversePolicyServiceServer
// for forward compatibility
type ReversePolicyServiceServer interface {
	ContainerPolicy(ReversePolicyService_ContainerPolicyServer) error
	HostPolicy(ReversePolicyService_HostPolicyServer) error
}

// UnimplementedReversePolicyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReversePolicyServiceServer struct {
}

func (UnimplementedReversePolicyServiceServer) ContainerPolicy(ReversePolicyService_ContainerPolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method ContainerPolicy not implemented")
}
func (UnimplementedReversePolicyServiceServer) HostPolicy(ReversePolicyService_HostPolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method HostPolicy not implemented")
}

// UnsafeReversePolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReversePolicyServiceServer will
// result in compilation errors.
type UnsafeReversePolicyServiceServer interface {
	mustEmbedUnimplementedReversePolicyServiceServer()
}

func RegisterReversePolicyServiceServer(s grpc.ServiceRegistrar, srv ReversePolicyServiceServer) {
	s.RegisterService(&ReversePolicyService_ServiceDesc, srv)
}

func _ReversePolicyService_ContainerPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReversePolicyServiceServer).ContainerPolicy(&reversePolicyServiceContainerPolicyServer{stream})
}

type ReversePolicyService_ContainerPolicyServer interface {
	Send(*Policy) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type reversePolicyServiceContainerPolicyServer struct {
	grpc.ServerStream
}

func (x *reversePolicyServiceContainerPolicyServer) Send(m *Policy) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reversePolicyServiceContainerPolicyServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReversePolicyService_HostPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReversePolicyServiceServer).HostPolicy(&reversePolicyServiceHostPolicyServer{stream})
}

type ReversePolicyService_HostPolicyServer interface {
	Send(*Policy) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type reversePolicyServiceHostPolicyServer struct {
	grpc.ServerStream
}

func (x *reversePolicyServiceHostPolicyServer) Send(m *Policy) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reversePolicyServiceHostPolicyServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReversePolicyService_ServiceDesc is the grpc.ServiceDesc for ReversePolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReversePolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policy.ReversePolicyService",
	HandlerType: (*ReversePolicyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "containerPolicy",
			Handler:       _ReversePolicyService_ContainerPolicy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "hostPolicy",
			Handler:       _ReversePolicyService_HostPolicy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "policy.proto",
}
