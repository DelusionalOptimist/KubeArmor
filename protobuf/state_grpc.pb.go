// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: state.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateAgentClient is the client API for StateAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateAgentClient interface {
	StateAgent(ctx context.Context, opts ...grpc.CallOption) (StateAgent_StateAgentClient, error)
}

type stateAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewStateAgentClient(cc grpc.ClientConnInterface) StateAgentClient {
	return &stateAgentClient{cc}
}

func (c *stateAgentClient) StateAgent(ctx context.Context, opts ...grpc.CallOption) (StateAgent_StateAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateAgent_ServiceDesc.Streams[0], "/state_agent.StateAgent/StateAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateAgentStateAgentClient{stream}
	return x, nil
}

type StateAgent_StateAgentClient interface {
	Send(*StateEvent) error
	Recv() (*StatusCode, error)
	grpc.ClientStream
}

type stateAgentStateAgentClient struct {
	grpc.ClientStream
}

func (x *stateAgentStateAgentClient) Send(m *StateEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stateAgentStateAgentClient) Recv() (*StatusCode, error) {
	m := new(StatusCode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateAgentServer is the server API for StateAgent service.
// All implementations should embed UnimplementedStateAgentServer
// for forward compatibility
type StateAgentServer interface {
	StateAgent(StateAgent_StateAgentServer) error
}

// UnimplementedStateAgentServer should be embedded to have forward compatible implementations.
type UnimplementedStateAgentServer struct {
}

func (UnimplementedStateAgentServer) StateAgent(StateAgent_StateAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method StateAgent not implemented")
}

// UnsafeStateAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateAgentServer will
// result in compilation errors.
type UnsafeStateAgentServer interface {
	mustEmbedUnimplementedStateAgentServer()
}

func RegisterStateAgentServer(s grpc.ServiceRegistrar, srv StateAgentServer) {
	s.RegisterService(&StateAgent_ServiceDesc, srv)
}

func _StateAgent_StateAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateAgentServer).StateAgent(&stateAgentStateAgentServer{stream})
}

type StateAgent_StateAgentServer interface {
	Send(*StatusCode) error
	Recv() (*StateEvent, error)
	grpc.ServerStream
}

type stateAgentStateAgentServer struct {
	grpc.ServerStream
}

func (x *stateAgentStateAgentServer) Send(m *StatusCode) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stateAgentStateAgentServer) Recv() (*StateEvent, error) {
	m := new(StateEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateAgent_ServiceDesc is the grpc.ServiceDesc for StateAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "state_agent.StateAgent",
	HandlerType: (*StateAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateAgent",
			Handler:       _StateAgent_StateAgent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "state.proto",
}
